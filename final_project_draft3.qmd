---
title: "Your Title"
subtitle: "BMIN503/EPID600 Final Project"
author: "FirstName LastName"
format: html
editor: visual
number-sections: true
embed-resources: true
---

------------------------------------------------------------------------

Use this template to complete your project throughout the course. Your Final Project presentation will be based on the contents of this document. Replace the title/name above and text below with your own, but keep the headers. Feel free to change the theme and other display settings, although this is not required.

## Overview {#sec-overview}

Give a brief a description of your project and its goal(s), what data you are using to complete it, and what two faculty/staff in different fields you have spoken to about your project with a brief summary of what you learned from each person. Include a link to your final project GitHub repository.

## Introduction {#sec-introduction}

Describe the problem addressed, its significance, and some background to motivate the problem. This should extend what is in the @sec-overview.

Explain why your problem is interdisciplinary, what fields can contribute to its understanding, and incorporate background related to what you learned from meeting with faculty/staff.

## Methods {#sec-methods}

Describe the data used and general methodological approach used to address the problem described in the @sec-introduction. Subsequently, incorporate full R code necessary to retrieve and clean data, and perform analysis. Be sure to include a description of code so that others (including your future self) can understand what you are doing and why.

```{r}
# Load necessary packages
library(tidyverse)
library(sf)
library(tidycensus)
library(ggspatial)
library(leaflet)
library(nhanesA)
library(gtsummary)
library(readxl)

```

```{r}
# Use a Census API Key to perform queries with tidycensus in R, to use data from the Decennial Census and the American Community Survey (ACS).
#| eval: FALSE 
census_api_key("8d4ae400e665d714446a25ed86d77a9125c57ec6", install = TRUE, overwrite = TRUE)
```

```{r}
## 2020 Decennial Census Variables with Demographic and Housing Characteristics File (DHC)

decennial_2020_vars_dhc <- load_variables(
                              year = 2020, 
                              "dhc", #decennial census Demographic and Housing Characteristics file
                              cache = TRUE
                             )

## race
vars_dhc_race = c(
        #all = "P3_001N",
        white = "P3_002N",
        baa = "P3_003N",
        amin = "P3_004N",
        asian = "P3_005N",
        nhopi = "P3_006N",
        other = "P3_007N",
        multi = "P3_008N"
       )

data_dhc_race = get_decennial(
  geography = "tract",
  state = "PA",
  variables = vars_dhc_race,
  summary_var = "P3_001N", #creates a column w/'total' variable
  year = 2020,
  sumfile = "dhc"
)
#create a column with frequency
data_dhc_race <- data_dhc_race %>%
  mutate(var_freq_race = ifelse(summary_value != 0, value / summary_value, NA))
#remove variable list
rm(vars_dhc_race)

## ethnicity
vars_dhc_ethnicity = c(
        #all = "P4_001N",
        nothisp = "P4_002N", #Not Hispanic or Latino
        hisp = "P4_003N" #Hispanic or Latino
       )

data_dhc_ethnicity = get_decennial(
  geography = "tract",
  state = "PA",
  variables = vars_dhc_ethnicity,
  summary_var = "P4_001N", #creates a column w/'total' variable
  year = 2020,
  sumfile = "dhc"
)
data_dhc_ethnicity <- data_dhc_ethnicity %>%
  mutate(var_freq_ethnicity = ifelse(summary_value != 0, value / summary_value, NA))
rm(vars_dhc_ethnicity)

## urban/rural
vars_dhc_urban_p = c(
        #all = "P2_001N",
        urban = "P2_002N",
        rural = "P2_003N",
        urbanrural_undefined = "P2_004N" #Not defined for this file
       )

data_dhc_urban_p = get_decennial(
  geography = "tract",
  state = "PA",
  variables = vars_dhc_urban_p,
  summary_var = "P2_001N", #creates a column w/'total' variable
  year = 2020,
  sumfile = "dhc"
)
data_dhc_urban_p <- data_dhc_urban_p %>%
  mutate(var_freq_urban = ifelse(summary_value != 0, value / summary_value, NA))
rm(vars_dhc_urban_p)

## housing units occupied
vars_dhc_housing_occ = c(
        #all = "H3_001N",
        housing_occupied = "H3_002N",
        housing_vacant = "H3_003N"
        )

data_dhc_housing_occ = get_decennial(
  geography = "tract",
  state = "PA",
  variables = vars_dhc_housing_occ,
  summary_var = "H3_001N", #creates a column w/'total' variable
  year = 2020,
  sumfile = "dhc"
)
data_dhc_housing_occ <- data_dhc_housing_occ %>%
  mutate(var_freq_housing_occ = ifelse(summary_value != 0, value / summary_value, NA))
rm(vars_dhc_housing_occ)

## household type
#NOTE: A household that has at least one member of the household related to the householder by birth, marriage, or adoption is a "Family household." "Nonfamily households" consist of people living alone and households which do not have any members related to the householder.
vars_dhc_household_type = c(
        #all = "P16_001N",
        married = "P16_003N", #Family households: Married couple family
        householder_male = "P16_005N", #Family households: Male householder, no spouse present
        householder_female = "P16_006N", #Family households: Female householder, no spouse present
        householder_alone = "P16_008N", #Nonfamily households: Householder living alone
        householder_not_alone = "P16_009N" #Nonfamily households: Householder not living alone
       )

data_dhc_household_type = get_decennial(
  geography = "tract",
  state = "PA",
  variables = vars_dhc_household_type,
  summary_var = "P16_001N", #creates a column w/'total' variable
  year = 2020,
  sumfile = "dhc"
)
data_dhc_household_type <- data_dhc_household_type %>%
  mutate(var_freq_household_type = ifelse(summary_value != 0, value / summary_value, NA))
rm(vars_dhc_household_type)

## household size
vars_dhc_household_size = c(
       #all = "H9_001N",
        household_one = "H9_002N", #1-person household
        household_two = "H9_003N", #2-person household
        household_three = "H9_004N", #3-person household
        household_four = "H9_005N", #4-person household
        household_five = "H9_006N", #5-person household
        household_six = "H9_007N", #6-person household
        household_seven = "H9_008N" #7-person household
        )

data_dhc_household_size = get_decennial(
  geography = "tract",
  state = "PA",
  variables = vars_dhc_household_size,
  summary_var = "H9_001N", #creates a column w/'total' variable
  year = 2020,
  sumfile = "dhc"
)
data_dhc_household_size <- data_dhc_household_size %>%
  mutate(var_freq_household_size = ifelse(summary_value != 0, value / summary_value, NA))
rm(vars_dhc_household_size)


## median age
vars_dhc_median_age = c(
        age_median = "P13_001N"
        )

data_dhc_median_age = get_decennial(
  geography = "tract",
  state = "PA",
  variables = vars_dhc_median_age,
  year = 2020,
  sumfile = "dhc"
)
rm(vars_dhc_median_age)

```

```{r}
# 2016-2020 ACS 5-year Variables
acs_2020_vars <- load_variables(
  year = 2020, 
  "acs5", 
  cache = TRUE
)

## poverty level
vars_acs_poverty_level = c(
        #all = "B17003_001", #2020 Population 25+ for whom Poverty Status is Determined (ACS 5-Yr)
        pov_level_below = "B17003_002", #2020 Population 25+ with Income Below Poverty Level (ACS 5-Yr) 
        pov_level_atabove = "B17003_013" #2020 Population 25+ w/Income at/Above Poverty Level (ACS 5-Yr) 
        )

data_acs_poverty_level = get_acs(
  geography = "tract",
  state = "PA",
  variables = vars_acs_poverty_level,
  summary_var = "B17003_001", #creates a column w/'total' variable
  year = 2020
)
data_acs_poverty_level <- data_acs_poverty_level %>%
  mutate(var_freq_poverty_level = ifelse(summary_est != 0, estimate / summary_est, NA))
rm(vars_acs_poverty_level)

## educational attainment
vars_acs_education = c(
        #all = "B17003_001", #2020 Population 25+ for whom Poverty Status is Determined (ACS 5-Yr)
        pov_below_m_lesshighschool = "B17003_004", #2020 Male 25+ Below Poverty: < High School Grad (ACS 5-Yr)
        pov_below_m_highschoolgrad = "B17003_005", #2020 Male 25+ Below Poverty: High School Grad (ACS 5-Yr)
        pov_below_m_associates = "B17003_006", #2020 Male 25+ Below Poverty: Some college, associate's degree (ACS 5-Yr)
        pov_below_m_collegegrad = "B17003_007", #2020 Male 25+ Below Poverty: Bachelor/Higher (ACS 5-Yr)
        pov_below_f_lesshighschool = "B17003_009", #2020 Female 25+ Below Poverty: < High School Grad (ACS 5-Yr)
        pov_below_f_highschoolgrad = "B17003_010", #2020 Female 25+ Below Poverty: High School Grad (ACS 5-Yr)
        pov_below_f_associates = "B17003_011", #2020 Female 25+ Below Poverty: Some college, associate's degree (ACS 5-Yr)
        pov_below_f_collegegrad = "B17003_012", #2020 Female 25+ Below Poverty: Bachelor/Higher (ACS 5-Yr)
        pov_above_m_lesshighschool = "B17003_015", #2020 Male 25+ Above Poverty: < High School Grad (ACS 5-Yr)
        pov_above_m_highschoolgrad = "B17003_016", #2020 Male 25+ Above Poverty: High School Grad (ACS 5-Yr)
        pov_above_m_associates = "B17003_017", #2020 Male 25+ Above Poverty: Some college, associate's degree (ACS 5-Yr)
        pov_above_m_collegegrad = "B17003_018", #2020 Male 25+ Above Poverty: Bachelor/Higher (ACS 5-Yr)
        pov_above_f_lesshighschool = "B17003_020", #2020 Female 25+ Above Poverty: < High School Grad (ACS 5-Yr)
        pov_above_f_highschoolgrad = "B17003_021", #2020 Female 25+ Above Poverty: High School Grad (ACS 5-Yr)
        pov_above_f_associates = "B17003_022", #2020 Female 25+ Above Poverty: Some college, associate's degree (ACS 5-Yr)
        pov_above_f_collegegrad = "B17003_023" #2020 Female 25+ Above Poverty: Bachelor/Higher (ACS 5-Yr)
        )

data_acs_education = get_acs(
  geography = "tract",
  state = "PA",
  variables = vars_acs_education,
  summary_var = "B17003_001", #creates a column w/'total' variable
  year = 2020
)

# Summarize the data
data_acs_education <- data_acs_education %>%
  mutate(category = case_when(
    variable %in% c("pov_below_m_lesshighschool", "pov_below_f_lesshighschool", "pov_above_m_lesshighschool", "pov_above_f_lesshighschool") ~ "lesshighschool",
    variable %in% c("pov_below_m_highschoolgrad", "pov_below_f_highschoolgrad", "pov_above_m_highschoolgrad", "pov_above_f_highschoolgrad") ~ "highschoolgrad",
    variable %in% c("pov_below_m_associates", "pov_below_f_associates", "pov_above_m_associates", "pov_above_f_associates") ~ "associates",
    variable %in% c("pov_below_m_collegegrad", "pov_below_f_collegegrad", "pov_above_m_collegegrad", "pov_above_f_collegegrad") ~ "collegegrad",
    TRUE ~ NA_character_  # Handle cases that do not fall into these categories
  ))

data_acs_education_combined <- data_acs_education %>%
  group_by(GEOID, category) %>%
  summarise(
    estimate = sum(estimate, na.rm = TRUE),
    summary_est = first(summary_est),  # Assuming summary_est is the same for each group
    var_freq_education = estimate / summary_est,
    .groups = 'drop'
  )

## income
vars_acs_income = c(
        #all = "B19001_001", #HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2020 INFLATION-ADJUSTED DOLLARS)
        income_under10k = "B19001_002", #Less than $10,000
        income_10_add5 = "B19001_003", #$10,000 to $14,999
        income_15_add5 = "B19001_004", #$15,000 to $19,999
        income_20_add5 = "B19001_005", #$20,000 to $24,999
        income_25_add5 = "B19001_006", #$25,000 to $29,999
        income_30_add5 = "B19001_007", #$30,000 to $34,999
        income_35_add5 = "B19001_008", #$35,000 to $39,999
        income_40_add5 = "B19001_009", #$40,000 to $44,999
        income_45_add5 = "B19001_010", #$45,000 to $49,999
        income_50_add10 = "B19001_011", #$50,000 to $59,999
        income_60_add15 = "B19001_012", #$60,000 to $74,999
        income_75_add25 = "B19001_013", #$75,000 to $99,999
        income_100_add25 = "B19001_014", #$100,000 to $124,999
        income_125_add25 = "B19001_015", #$125,000 to $149,999
        income_150_add50 = "B19001_016", #$150,000 to $199,999
        income_above200 = "B19001_017" #$200,000 or more
        )

data_acs_income = get_acs(
  geography = "tract",
  state = "PA",
  variables = vars_acs_income,
  summary_var = "B19001_001", #creates a column w/'total' variable
  year = 2020
)

# Summarize the data
data_acs_income <- data_acs_income %>%
  mutate(category = case_when(
    variable %in% "income_under10k" ~ "income_under10k",
    variable %in% c("income_10_add5", "income_15_add5", "income_20_add5") ~ "income10kuntil25k",
    variable %in% c("income_25_add5", "income_30_add5", "income_35_add5", "income_40_add5", "income_45_add5") ~ "income25kuntil50k",
    variable %in% c("income_50_add10", "income_60_add15") ~ "income50kuntil75k",
    variable %in% "income_75_add25" ~ "income75kuntil100k",
    variable %in% "income_100_add25" ~ "income100kuntil125k",
    variable %in% "income_125_add25" ~ "income125kuntil150k",
    variable %in% "income_150_add50" ~ "income150kuntil200k",
    variable %in% "income_above200" ~ "incomeabove200k",
    TRUE ~ NA_character_  # Handle cases that do not fall into these categories
  ))

data_acs_income_combined <- data_acs_income %>%
  group_by(GEOID, category) %>%
  summarise(
    estimate = sum(estimate, na.rm = TRUE),
    summary_est = first(summary_est),  # Assuming summary_est is the same for each group
    var_freq_income = estimate / summary_est,
    .groups = 'drop'
  )


```

```{r}
# Read in PLACES data with health outcomes data
data_places = read_csv("PLACES__Local_Data_for_Better_Health__Census_Tract_Data_2024_release_20241027.csv")

# Filter to include only Pennsylvania, and only the obesity data
data_places=data_places |> filter(StateAbbr=="PA") |> filter(Measure=="Obesity among adults")

# rename variable "LocationName" to "GEOID" to be consistent with census data
data_places <- data_places %>% 
    rename("GEOID" = "LocationName")


####################


### WHY DOES THIS NOT WORK?

# Define the URL of the Excel file
url_places <- "https://data.cdc.gov/download/PLACES-Local-Data-for-Better-Health-Census-Tract-D/excel/PLACES-Local-Data-for-Better-Health-Census-Tract-D.xlsx"
#url_places <- "https://data.cdc.gov/500-Cities-Places/PLACES-Local-Data-for-Better-Health-Census-Tract-D/cwsq-ngmh/about_data"

# Define a temporary file path
temp_file <- tempfile(fileext = ".xlsx")

# Download the Excel file
download.file(url_places, temp_file, mode = "wb")

# Read the Excel file
data_places <- read_excel(temp_file)

# View the first few rows of the data
print(head(data_places))



```

## Results {#sec-results}

Describe your results and include relevant tables, plots, and code/comments used to obtain them. You may refer to the @sec-methods as needed. End with a brief conclusion of your findings related to the question you set out to address. You can include references if you'd like, but this is not required.

```{r}
# What is our n?

data_places %>%
  inner_join(data_dhc_median_age, by = "GEOID") %>%
  distinct(GEOID) |> nrow()
```

```{r}
# Count the missing data

sum(is.na(data_acs_education_combined$var_freq_education))
sum(is.na(data_acs_income_combined$var_freq_income))
sum(is.na(data_acs_poverty_level$var_freq_poverty_level))
sum(is.na(data_dhc_ethnicity$var_freq_ethnicity))
sum(is.na(data_dhc_household_size$var_freq_household_size))
sum(is.na(data_dhc_household_type$var_freq_household_type))
sum(is.na(data_dhc_housing_occ$var_freq_housing_occ))
sum(is.na(data_dhc_race$var_freq_race))
sum(is.na(data_dhc_urban_p$value))
sum(is.na(data_dhc_median_age$value))
sum(is.na(data_places$Data_Value))

data_dhc_median_age$GEOID[is.na(data_dhc_median_age$value)==T] # the tracts with missing median age
```

```{r}
# Summary information for the variables of interest
data_acs_education_combined |> select(category) |> tbl_summary()
data_acs_income_combined |> select(category) |> tbl_summary()
data_acs_poverty_level |> select(variable) |> tbl_summary()
data_dhc_ethnicity |> select(variable) |> tbl_summary()
data_dhc_household_size |> select(variable) |> tbl_summary()
data_dhc_household_type |> select(variable) |> tbl_summary()
data_dhc_housing_occ |> select(variable) |> tbl_summary()
data_dhc_race |> select(variable) |> tbl_summary()

# Median age
ggplot(data = data_dhc_median_age, aes(value)) + 
    geom_histogram(aes(y = after_stat(density)), breaks = seq(0, 80, 1), 
                   color = "blue", fill = "blue", alpha = 0.7) +
    geom_density(color = "red")
# fairly normal distribution, so it is okay to use mean rather than median
median(data_dhc_median_age$value, na.rm = T)

# Percent urban vs rural
mean(data_dhc_urban_p$var_freq_urban, na.rm = T)
```

```{r}
# Graph the data basics

avg_freq_acs_education_combined <- data_acs_education_combined |>
  group_by(category) |>
  summarize(avg_frequency = mean(var_freq_education, na.rm = TRUE))

print(avg_freq_acs_education_combined)

ggplot(avg_freq_acs_education_combined, aes(x = category, y = avg_frequency)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Average Frequencies by Category",
       x = "Category",
       y = "Average Frequency") +
  theme_minimal()


```

## Conclusion

This the conclusion. The @sec-results can be invoked here.
